{"version":3,"sources":["components/Stock.js","components/Search-select.js","App.js","index.js"],"names":["Stock","props","data","labels","dates","datasets","pricesHigh","label","borderColor","fill","borderWidth","pricesLow","pricesOpen","className","id","onClick","getPrice","currentPrice","query","options","plugins","legend","display","color","fontFamily","font","size","weight","family","title","text","padding","top","bottom","Select","cacheOptions","maxMenuHeight","onChange","value","placeholder","theme","borderRadius","border","boxShadow","margin","colors","primary25","primary","loadOptions","App","useState","setQuery","stockChartXValues","setStockChartXValues","stockChartYValuesHigh","setStockChartYValuesHigh","stockChartYValuesLow","setStockChartYValuesLow","stockChartYValuesOpen","setStockChartYValuesOpen","setCurrentPrice","key","process","useEffect","search","a","fetch","response","json","console","log","stockData","push","reverse","price","parseFloat","toLocaleString","inputText","callBack","arr","name","symbol","selectedSymbol","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95b5ee7a.chunk.js","sourcesContent":["import React from \"react\";\nimport { Line } from 'react-chartjs-2';\n\nconst Stock = (props) => {\n   \n    const data = {\n        labels: props.dates,\n        datasets: [\n            {\n                data: props.pricesHigh,\n                label: 'High',\n                borderColor: '#3333ff',\n                fill: false,\n                borderWidth: 2,\n            },\n            {\n                data: props.pricesLow,\n                label: 'Low',\n                borderColor: 'red',\n                fill: false,\n                borderWidth: 2,\n            },\n            {\n                data: props.pricesOpen,\n                label: 'Open',\n                borderColor: 'yellow',\n                fill: false,\n                borderWidth: 2,\n            }\n        ],\n    }\n\n    const options = {\n       \n        plugins: {\n            legend: {\n                display: true,\n                labels: {\n                    color: 'black',\n                    fontFamily: 'Montserrat',\n                },\n                font: {\n                    size: 18,\n                    weight: 'bold',\n                    family: 'Montserrat',\n                },\n            },\n            title: {\n                display: true,\n                text: 'Last 6 Months',\n                padding: {\n                    top: 10,\n                    bottom: 30\n                },\n            font: {\n                size: 32,\n                family: 'Montserrat'\n            },\n        },\n    }\n        \n    }\n        \n                \n        \n    return (\n        <div className=\"chart\">\n            <button \n                id=\"get-price-button\"\n                onClick={props.getPrice}>\n                    Get Current Price\n                </button>\n                {props.currentPrice !== null ?\n                    <p className=\"current-price\">\n                      Current Price For {props.query}: <span>${props.currentPrice}</span>\n                    </p> : ''  }\n                \n            <Line data={data} options={options} />\n        </div>\n    )\n}\n\nexport default Stock;","import React from \"react\";\nimport AsyncSelect from 'react-select/async';\n\nconst Select = (props) => {\n\n    return (\n        <>\n            <h1 className=\"title\">Stock: <span className=\"symbol\">{props.query}</span></h1>\n            <div className=\"search\">\n            <AsyncSelect \n            cacheOptions\n            maxMenuHeight={200}\n            onChange={props.onChange}\n            value={props.query}\n            placeholder={'Stock Symbol (e.g. TSLA)'}\n            theme={theme => ({\n            ...theme,\n            borderRadius: 5,\n            border: 'rgb(204, 219, 232) 1px solid',\n            boxShadow: '0 1px 3px rgb(0 0 0 / 12%)',\n            margin: '20px 10px',\n            colors: {\n                ...theme.colors,\n                primary25: 'lightblue',\n                primary: 'black',\n            },\n            })}\n            loadOptions={props.loadOptions}\n            />\n            </div>\n        </>\n    )\n}\n\nexport default Select;","import React, {useState, useEffect} from \"react\";\nimport Stock from \"./components/Stock\";\nimport Select from \"./components/Search-select\";\n\n\nfunction App() {\n\n  const [query, setQuery] =  useState('');\n  const [stockChartXValues, setStockChartXValues] = useState([]);\n  const [stockChartYValuesHigh, setStockChartYValuesHigh] = useState([]);\n  const [stockChartYValuesLow, setStockChartYValuesLow] = useState([]);\n  const [stockChartYValuesOpen, setStockChartYValuesOpen] = useState([]);\n  const [currentPrice, setCurrentPrice] = useState(null);\n\n\n  const key = process.env.REACT_APP_API_KEY;\n\n  useEffect(() => {\n    const search = async () => {\n      const stockChartXValues = [];\n      const stockChartYValuesHigh = [];\n      const stockChartYValuesLow =[];\n      const stockChartYValuesOpen = [];\n\n        try {\n          const response = await fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&outputsize=compact&symbol=${query}&apikey=${key}`);\n          const data = await response.json();\n          console.log(data);\n          const stockData = data['Time Series (Daily)'];\n          console.log(stockData);\n          for (let key in stockData) {\n            stockChartXValues.push(key);\n            stockChartYValuesHigh.push(stockData[key]['2. high']);\n            stockChartYValuesLow.push(stockData[key]['3. low']);\n            stockChartYValuesOpen.push(stockData[key]['1. open']);\n          }\n          \n          setStockChartXValues(stockChartXValues.reverse());\n          setStockChartYValuesHigh(stockChartYValuesHigh.reverse());\n          setStockChartYValuesLow(stockChartYValuesLow.reverse());\n          setStockChartYValuesOpen(stockChartYValuesOpen.reverse());\n        } catch (error) {\n        }\n    }\n    search();\n\n  }, [query]);\n  \n\n  const getPrice = async () => {\n    try {\n      const response =  await fetch(`https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${query}&apikey=${key}`)\n      const data = await response.json();\n      const price = data['Global Quote']['05. price'];\n      console.log(price)\n      setCurrentPrice(parseFloat(price).toLocaleString());\n    } catch (error) {\n\n    }\n  }\n\n  const reset = () => {\n    setCurrentPrice(null);\n    setQuery('');\n    setStockChartXValues([]);\n    setStockChartYValuesHigh([]);\n    setStockChartYValuesOpen([]);\n    setStockChartYValuesLow([]);\n  }\n\n  const loadOptions = async (inputText, callBack) => {\n    try {\n      const response = await fetch(`https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords=${inputText}&apikey=${key}`)\n      const data = await response.json();\n      let arr = [];\n      for (let key in data['bestMatches']) {\n        let name = data['bestMatches'][key]['2. name'];\n        let symbol = data['bestMatches'][key]['1. symbol'];\n        arr.push({\n          label: '(' + symbol + ') ' + name,\n          value: symbol\n        })\n      }\n      callBack(arr);\n\n    } catch (error) {\n\n    }\n  }\n\n    const onChange = async (selectedSymbol) => {\n      let symbol = selectedSymbol.value\n      setQuery(symbol);\n\n    }\n\n  return (\n    <div className=\"app\">\n  \n       <Select \n       query={query}\n       loadOptions={loadOptions}\n       onChange={onChange}\n       />\n        \n       {(stockChartYValuesHigh.length > 0) \n        ?   \n          <Stock \n          pricesHigh={stockChartYValuesHigh}\n          pricesLow={stockChartYValuesLow}\n          pricesOpen={stockChartYValuesOpen}\n          dates={stockChartXValues}\n          query={query}\n          getPrice={getPrice}\n          currentPrice={currentPrice}\n          /> \n          : ''\n        }\n   </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}